<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.exasol</groupId>
    <artifactId>row-level-security-lua</artifactId>
    <version>0.2.0</version>
    <name>Exasol Row Level Security (Lua)</name>
    <description>This projects provides a plug-in to the Exasol database that adds per-row access control.</description>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>11</java.version>
        <junit.version>5.6.2</junit.version>
        <junit.platform.version>1.6.2</junit.platform.version>
        <surefire.and.failsafe.plugin.version>3.0.0-M4</surefire.and.failsafe.plugin.version>
        <sonar.coverage.jacoco.xmlReportPaths>target/site/jacoco/jacoco.xml,target/site/jacoco-it/jacoco.xml
        </sonar.coverage.jacoco.xmlReportPaths>
        <lua.src>${basedir}/src/main/lua</lua.src>
        <lua.test>${basedir}/src/test/lua</lua.test>
        <lua.path>/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;./?.lua;/usr/local/lib/lua/5.1/?.lua;/usr/local/lib/lua/5.1/?/init.lua;/usr/share/lua/5.1/?.lua;/usr/share/lua/5.1/?/init.lua</lua.path>
        <source.admin.scripts>${lua.src}/administration</source.admin.scripts>
    </properties>
    <repositories>
        <repository>
            <id>maven.exasol.com</id>
            <url>https://maven.exasol.com/artifactory/exasol-releases</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    <dependencies>
        <dependency>
            <groupId>com.exasol</groupId>
            <artifactId>exasol-jdbc</artifactId>
            <version>6.2.5</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.exasol</groupId>
            <artifactId>exasol-testcontainers</artifactId>
            <version>3.0.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>1.13.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <version>2.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.exasol</groupId>
            <artifactId>hamcrest-resultset-matcher</artifactId>
            <version>1.1.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-runner</artifactId>
            <version>${junit.platform.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <version>1.7.30</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.exasol</groupId>
            <artifactId>test-db-builder-java</artifactId>
            <version>0.2.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <!-- Note that we do not need the Surefire-plug-in in this project since unit tests are run 
                by luaunit. -->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${surefire.and.failsafe.plugin.version}</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
                <executions>
                    <execution>
                        <id>default-test</id>
                        <phase>none</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${surefire.and.failsafe.plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>Lua Unit Tests</id>
                        <phase>test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>${project.basedir}/tools/unittest.sh</executable>
                            <useMavenLogger>true</useMavenLogger>
                            <arguments>
                              <argument>${project.basedir}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <!-- Bundle the main script (dispatcher) and the modules into a single lua package 
                            that can be deployed as Lua adapter script. -->
                        <id>Lua Virtual Schema Bundle</id>
                        <phase>package</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>lua</executable>
                            <useMavenLogger>true</useMavenLogger>
                            <workingDirectory>${lua.src}</workingDirectory>
                            <arguments>
                                <argument>${basedir}/tools/amalg.lua</argument>
                                <argument>-o</argument>
                                <argument>${basedir}/target/row-level-security-dist-${project.version}.lua</argument>
                                <!-- Include main script containing the adapter entry point -->
                                <argument>-s</argument>
                                <argument>exasolvs/request_dispatcher.lua</argument>
                                <!-- Include modules by name (no slashes, no ".lua"!) -->
                                <argument>exasolvs.query_renderer</argument>
                                <argument>exasolrls.adapter</argument>
                                <argument>exasolrls.metadata_reader</argument>
                                <argument>exasolrls.table_protection_reader</argument>
                                <argument>exasolrls.query_rewriter</argument>
                                <argument>exasolrls.user_information</argument>
                                <argument>remotelog</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.sonatype.ossindex.maven</groupId>
                <artifactId>ossindex-maven-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>audit-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>audit</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- plugin> <groupId>org.itsallcode</groupId> <artifactId>openfasttrace-maven-plugin</artifactId> 
                <version>1.0.0</version> <executions> <execution> <id>trace-requirements</id> <goals> <goal>trace</goal> 
                </goals> </execution> </executions> </plugin -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <!-- Adding the Lua sources to the list of source directories is necessary 
                                    so that OFT can scan them. -->
                                <source>src/main/lua</source>
                                <source>src/test/lua</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!-- This pseudo-plug-in configuration exists to help Eclipse's M2E to map plug-in executions. 
                    It has no impact on a regular Maven build. -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.codehaus.mojo</groupId>
                                        <artifactId>exec-maven-plugin</artifactId>
                                        <versionRange>[1.0,)</versionRange>
                                        <goals>
                                            <goal>exec</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <execute />
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
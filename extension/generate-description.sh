#!/bin/bash

# This generates file src/extension-description.ts which describes the Lua virtual schema adapter script.

set -o errexit
set -o nounset
set -o pipefail

project_dir="$( cd "$(dirname "$0")/.." >/dev/null 2>&1 ; pwd -P )"
readonly project_dir
readonly target_dir="$project_dir/target"
readonly extension_config="$project_dir/extension/src/extension-description.ts"

readonly all_built_files=("$target_dir"/row-level-security-dist-*.lua)
readonly file_count=${#all_built_files[@]}

if [ "$file_count" -ne 1 ]; then
    echo "ERROR: Expected exactly one lua file but found $file_count in $target_dir: ${all_built_files[*]}"
    exit 1
fi

readonly complete_path="${all_built_files[0]}"
file_name=$(basename "$complete_path")
readonly file_name
case $(uname -s) in
  Darwin*)
    file_size_bytes=$(stat -f %z "$complete_path");;
  *)
    file_size_bytes=$(stat -c%s "$complete_path");;
esac
readonly file_size_bytes

version=
if [[ $file_name =~ ^row-level-security-dist-(.*).lua$ ]]; then
    version=${BASH_REMATCH[1]}
else
    echo "ERROR: Could not extract version from filename $file_name"
    exit 1
fi
readonly version

file_content=$(<"$target_dir/$file_name")
readonly file_content

# First escape \ to allow using \n in Lua strings. Then escape backticks ` used in Lua comments
# because we store the script content in a backtick-quoted TypeScript string.
# shellcheck disable=SC2016
escaped_content=$(echo "$file_content" | sed -r 's/\\/\\\\/g' | sed -r 's/`/\\`/g' )
readonly escaped_content

cat > "$extension_config" <<EOL
// Generated by $0
export const EXTENSION_DESCRIPTION = {
    version: "${version}",
    content: \`$escaped_content\`
}
EOL

echo "Generated extension config $extension_config:"
echo "File name: ${file_name}, size: ${file_size_bytes} bytes, version: ${version}"
